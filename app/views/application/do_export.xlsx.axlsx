wb = xlsx_package.workbook
wb.add_worksheet(name: "Export") do |sheet|

    title_style = sheet.styles.add_style(
        :bg_color => "00BBBBBB",
        :alignment=>{:vertical => :center},
        b: true
    )

    title2_style = sheet.styles.add_style(
        :bg_color => "00BBBBBB",
        :alignment=>{:vertical => :center}
    )

    first_col_style = sheet.styles.add_style(
        :alignment=>{:vertical => :center, horizontal: :center}
    )

    first_col_style_odd = sheet.styles.add_style(
        :alignment=>{:vertical => :center, horizontal: :center},
        :bg_color => "00FFFFFF"
    )

    first_col_style_even = sheet.styles.add_style(
        :alignment=>{:vertical => :center, horizontal: :center},
        :bg_color => "00DDDDDD"
    )

    ordinary_style = sheet.styles.add_style(
        :alignment=>{:vertical => :center, horizontal: :left}
    )

    ordinary_style_odd = sheet.styles.add_style(
        :alignment=>{:vertical => :center, horizontal: :left},
        :bg_color => "00FFFFFF"
    )

    ordinary_style_even = sheet.styles.add_style(
        :alignment=>{:vertical => :center, horizontal: :left},
        :bg_color => "00DDDDDD"
    )

    index_fix_style = sheet.styles.add_style(
        :bg_color => "00BBBBBB",
        :alignment=>{:vertical => :center, horizontal: :center}
    )

    img = File.expand_path('app/assets/images/logo_small.png')
    sheet.add_image(:image_src => img, :noSelect => true, :noMove => true) do |image|
        image.width = 448
        image.height = 96
        image.start_at(0, 0)
    end

    sheet.add_row [nil, "ver. #{@version_number}", "© Matej Kováč #{Date.current.year}"], height: 96, sz: 10

    sheet.add_row [" "]

    sheet.add_row [nil, "Kritériá vyhľadávania: ", ""], :style=>[nil, title_style, title_style]

    JSON.parse(params[:head]).each do |h|
        if !h[1].instance_of? Array
            content = h[1].blank? ? "---" : h[1]
            sheet.add_row ["", h[0], content], style: ordinary_style
        else
            if h[1].blank?
                sheet.add_row ["", h[0], "- bez obmedzenia -"], style: ordinary_style 
            else
                h[1].each_with_index do |r, index|
                    title = index==0 ? h[0] : nil
                    sheet.add_row ["", title, r], style: ordinary_style
                end
            end
        end
    end

    sheet.add_row ["", "Čas vygenerovania súboru: ", DateTime.current.strftime("%d %B %Y, %H:%M")], style: ordinary_style
    sheet.add_row ["", "Počet výsledkov: ", @result.size], style: ordinary_style

    sheet.add_row [" "]
    sheet.add_row [" "]

    column_names = render_excel_export_head(params[:fields])
    columns_count = column_names[:lower].size
    mergable_columns = generate_column_map_for_merging(params[:fields])
    mergable_cells = []
    sheet.add_row(column_names[:higher], style: title_style) if column_names[:higher].any?
    sheet.add_row column_names[:lower], style: ([index_fix_style].fill(title2_style, 1..columns_count-1))

    sheet.add_row [" "]

    @result.all.each_with_index do |result, index|
        index_added = false
        first_of_set_row_reference = nil
        row_reference = nil
        rows = render_excel_export_body(params[:fields], result)

        rows.each do |row|
            index_added ? row.unshift(nil) : row.unshift(index+1)
            result_style = index%2==0 ? ordinary_style_odd : ordinary_style_even
            line_num_style = index%2==0 ? first_col_style_odd : first_col_style_even
            row_reference = sheet.add_row row, style: ([line_num_style].fill(result_style, 1..columns_count-1))
            first_of_set_row_reference = row_reference if !index_added
            index_added = true
        end

        if first_of_set_row_reference != row_reference
            mergable_columns.each_with_index do |mc, index|
                if mc
                    character = (65+index).chr
                    first = "#{character}#{sheet.rows.index(first_of_set_row_reference)+1}"
                    last = "#{character}#{sheet.rows.index(row_reference)+1}"
                    #sheet["#{character}#{first}"].merge(sheet["#{character}#{last}"])
                    mergable_cells.push([first, last])
                end
            end
        end
    end

    mergable_cells.each do |cell|
        sheet[cell[0]].merge sheet[cell[1]]
    end

end