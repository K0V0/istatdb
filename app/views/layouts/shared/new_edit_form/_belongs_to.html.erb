<%
	single = instance_variable_get("@#{assoc.to_s}")
	coll = instance_variable_get("@#{assoc.to_s.pluralize}")

	if (defined? html_class)&&(!html_class.blank?)
		klass = html_class.to_s
	else
		klass = "#{assoc.to_s}_select"
	end

	html_id = "#{klass}_#{(obj.object.try(:id) || 0).to_s}"
	html_class = ""
	has_error = false
%>

<article
 class="decorated_wrap shrinked <%= klass %>"
 id="<%= html_id %>"
 <% if !(ss = searcher_settings).nil? %>
 	<%= generate_search_instructions(ss, assoc) %>
 <% end %>
>

	<input type="hidden" name="assoc-type" value="belongs_to">
	<input type="hidden" value="" name="<%= "#{obj.object.class.name.underscore}[#{coll.name.underscore}_id]" %>">

	<% if ss.has_key? :caption %>
		<div class="caption <%= 'required' if ss[:caption].has_key?(:required) %>">
			<%= assoc.to_s.classify.constantize.model_name.human %>
		</div>
	<% else %>
		<% if !ss.has_key? :query %>
			<div class="caption"><%= obj.object.model_name.human %></div>
		<% end %>
	<% end %>

	<div>
		<% 	mem_query = assoc.to_s
			mem_query += "_#{obj.object.id}" if multiedit %>

		<%= obj.fields_for assoc.to_sym, single do |a| %>

			<% fields.each do |field_name, opts| %>

				<% if multiedit %>
					<% has_error = obj.object.send(assoc).try(:errors).try(:has_key?, field_name) ? true : false %>
				<% end %>

				<%#= action_name %>

				<% a.object[field_name] = "" if action_name == "edit" %>

				<%= render('layouts/elements/input_text',
					field_name: field_name,
					obj: a,
					opts: opts,
					html_class: has_error ? (html_class + ' error') : html_class
				) %>

			<% end %>

			<%= render 'layouts/elements/input_fields_reset_button' %>

			<div>
				<%= a.label(
					"allow_search_as_new",
					t('search.search_as_new')
				) %>
				<%= a.check_box(
					:allow_search_as_new,
					{
						class: "#{assoc.to_s.singularize}_allow_add_new allow_add_new",
						checked: (@MEM.allow_add_new)[mem_query]
					},
					1,
					0
				) %>
			</div>

		<% end %>
	</div>

	<%= render('/layouts/elements/table_list_radio_buttons',
		obj: obj.object,
		# main controller singleton instance variable
		coll: coll,
		# collection of all from associated model
		text_method: fields.keys,
		multiedit: multiedit,
		disabled: (@MEM.allow_add_new)[mem_query] || false
	) if coll.length > 0 %>

	<%= render('/layouts/shared/new_edit_form/not_any_record') if coll.length == 0 %>

	<%= render('layouts/elements/input_fields_error',
		obj: obj,
		fields: fields,
		assoc: obj.object.send(assoc)
		#assoc: (multiedit == true ? obj.object.send(assoc) : single),
	) %>

</article>
